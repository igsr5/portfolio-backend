// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlogFromManualItem is an object representing the database table.
type BlogFromManualItem struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title        string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	PostedAt     time.Time `boil:"posted_at" json:"posted_at" toml:"posted_at" yaml:"posted_at"`
	SiteURL      string    `boil:"site_url" json:"site_url" toml:"site_url" yaml:"site_url"`
	ThumbnailURL string    `boil:"thumbnail_url" json:"thumbnail_url" toml:"thumbnail_url" yaml:"thumbnail_url"`
	ServiceName  string    `boil:"service_name" json:"service_name" toml:"service_name" yaml:"service_name"`

	R *blogFromManualItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blogFromManualItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlogFromManualItemColumns = struct {
	ID           string
	Title        string
	PostedAt     string
	SiteURL      string
	ThumbnailURL string
	ServiceName  string
}{
	ID:           "id",
	Title:        "title",
	PostedAt:     "posted_at",
	SiteURL:      "site_url",
	ThumbnailURL: "thumbnail_url",
	ServiceName:  "service_name",
}

var BlogFromManualItemTableColumns = struct {
	ID           string
	Title        string
	PostedAt     string
	SiteURL      string
	ThumbnailURL string
	ServiceName  string
}{
	ID:           "blog_from_manual_items.id",
	Title:        "blog_from_manual_items.title",
	PostedAt:     "blog_from_manual_items.posted_at",
	SiteURL:      "blog_from_manual_items.site_url",
	ThumbnailURL: "blog_from_manual_items.thumbnail_url",
	ServiceName:  "blog_from_manual_items.service_name",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BlogFromManualItemWhere = struct {
	ID           whereHelperstring
	Title        whereHelperstring
	PostedAt     whereHelpertime_Time
	SiteURL      whereHelperstring
	ThumbnailURL whereHelperstring
	ServiceName  whereHelperstring
}{
	ID:           whereHelperstring{field: "`blog_from_manual_items`.`id`"},
	Title:        whereHelperstring{field: "`blog_from_manual_items`.`title`"},
	PostedAt:     whereHelpertime_Time{field: "`blog_from_manual_items`.`posted_at`"},
	SiteURL:      whereHelperstring{field: "`blog_from_manual_items`.`site_url`"},
	ThumbnailURL: whereHelperstring{field: "`blog_from_manual_items`.`thumbnail_url`"},
	ServiceName:  whereHelperstring{field: "`blog_from_manual_items`.`service_name`"},
}

// BlogFromManualItemRels is where relationship names are stored.
var BlogFromManualItemRels = struct {
}{}

// blogFromManualItemR is where relationships are stored.
type blogFromManualItemR struct {
}

// NewStruct creates a new relationship struct
func (*blogFromManualItemR) NewStruct() *blogFromManualItemR {
	return &blogFromManualItemR{}
}

// blogFromManualItemL is where Load methods for each relationship are stored.
type blogFromManualItemL struct{}

var (
	blogFromManualItemAllColumns            = []string{"id", "title", "posted_at", "site_url", "thumbnail_url", "service_name"}
	blogFromManualItemColumnsWithoutDefault = []string{"id", "title", "posted_at", "site_url", "thumbnail_url", "service_name"}
	blogFromManualItemColumnsWithDefault    = []string{}
	blogFromManualItemPrimaryKeyColumns     = []string{"id"}
)

type (
	// BlogFromManualItemSlice is an alias for a slice of pointers to BlogFromManualItem.
	// This should almost always be used instead of []BlogFromManualItem.
	BlogFromManualItemSlice []*BlogFromManualItem
	// BlogFromManualItemHook is the signature for custom BlogFromManualItem hook methods
	BlogFromManualItemHook func(context.Context, boil.ContextExecutor, *BlogFromManualItem) error

	blogFromManualItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blogFromManualItemType                 = reflect.TypeOf(&BlogFromManualItem{})
	blogFromManualItemMapping              = queries.MakeStructMapping(blogFromManualItemType)
	blogFromManualItemPrimaryKeyMapping, _ = queries.BindMapping(blogFromManualItemType, blogFromManualItemMapping, blogFromManualItemPrimaryKeyColumns)
	blogFromManualItemInsertCacheMut       sync.RWMutex
	blogFromManualItemInsertCache          = make(map[string]insertCache)
	blogFromManualItemUpdateCacheMut       sync.RWMutex
	blogFromManualItemUpdateCache          = make(map[string]updateCache)
	blogFromManualItemUpsertCacheMut       sync.RWMutex
	blogFromManualItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blogFromManualItemBeforeInsertHooks []BlogFromManualItemHook
var blogFromManualItemBeforeUpdateHooks []BlogFromManualItemHook
var blogFromManualItemBeforeDeleteHooks []BlogFromManualItemHook
var blogFromManualItemBeforeUpsertHooks []BlogFromManualItemHook

var blogFromManualItemAfterInsertHooks []BlogFromManualItemHook
var blogFromManualItemAfterSelectHooks []BlogFromManualItemHook
var blogFromManualItemAfterUpdateHooks []BlogFromManualItemHook
var blogFromManualItemAfterDeleteHooks []BlogFromManualItemHook
var blogFromManualItemAfterUpsertHooks []BlogFromManualItemHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlogFromManualItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlogFromManualItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlogFromManualItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlogFromManualItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlogFromManualItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlogFromManualItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlogFromManualItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlogFromManualItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlogFromManualItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range blogFromManualItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlogFromManualItemHook registers your hook function for all future operations.
func AddBlogFromManualItemHook(hookPoint boil.HookPoint, blogFromManualItemHook BlogFromManualItemHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		blogFromManualItemBeforeInsertHooks = append(blogFromManualItemBeforeInsertHooks, blogFromManualItemHook)
	case boil.BeforeUpdateHook:
		blogFromManualItemBeforeUpdateHooks = append(blogFromManualItemBeforeUpdateHooks, blogFromManualItemHook)
	case boil.BeforeDeleteHook:
		blogFromManualItemBeforeDeleteHooks = append(blogFromManualItemBeforeDeleteHooks, blogFromManualItemHook)
	case boil.BeforeUpsertHook:
		blogFromManualItemBeforeUpsertHooks = append(blogFromManualItemBeforeUpsertHooks, blogFromManualItemHook)
	case boil.AfterInsertHook:
		blogFromManualItemAfterInsertHooks = append(blogFromManualItemAfterInsertHooks, blogFromManualItemHook)
	case boil.AfterSelectHook:
		blogFromManualItemAfterSelectHooks = append(blogFromManualItemAfterSelectHooks, blogFromManualItemHook)
	case boil.AfterUpdateHook:
		blogFromManualItemAfterUpdateHooks = append(blogFromManualItemAfterUpdateHooks, blogFromManualItemHook)
	case boil.AfterDeleteHook:
		blogFromManualItemAfterDeleteHooks = append(blogFromManualItemAfterDeleteHooks, blogFromManualItemHook)
	case boil.AfterUpsertHook:
		blogFromManualItemAfterUpsertHooks = append(blogFromManualItemAfterUpsertHooks, blogFromManualItemHook)
	}
}

// OneG returns a single blogFromManualItem record from the query using the global executor.
func (q blogFromManualItemQuery) OneG(ctx context.Context) (*BlogFromManualItem, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single blogFromManualItem record from the query.
func (q blogFromManualItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BlogFromManualItem, error) {
	o := &BlogFromManualItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for blog_from_manual_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all BlogFromManualItem records from the query using the global executor.
func (q blogFromManualItemQuery) AllG(ctx context.Context) (BlogFromManualItemSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BlogFromManualItem records from the query.
func (q blogFromManualItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (BlogFromManualItemSlice, error) {
	var o []*BlogFromManualItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BlogFromManualItem slice")
	}

	if len(blogFromManualItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all BlogFromManualItem records in the query, and panics on error.
func (q blogFromManualItemQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BlogFromManualItem records in the query.
func (q blogFromManualItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count blog_from_manual_items rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q blogFromManualItemQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q blogFromManualItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if blog_from_manual_items exists")
	}

	return count > 0, nil
}

// BlogFromManualItems retrieves all the records using an executor.
func BlogFromManualItems(mods ...qm.QueryMod) blogFromManualItemQuery {
	mods = append(mods, qm.From("`blog_from_manual_items`"))
	return blogFromManualItemQuery{NewQuery(mods...)}
}

// FindBlogFromManualItemG retrieves a single record by ID.
func FindBlogFromManualItemG(ctx context.Context, iD string, selectCols ...string) (*BlogFromManualItem, error) {
	return FindBlogFromManualItem(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindBlogFromManualItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlogFromManualItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BlogFromManualItem, error) {
	blogFromManualItemObj := &BlogFromManualItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `blog_from_manual_items` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, blogFromManualItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from blog_from_manual_items")
	}

	if err = blogFromManualItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return blogFromManualItemObj, err
	}

	return blogFromManualItemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BlogFromManualItem) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlogFromManualItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no blog_from_manual_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blogFromManualItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blogFromManualItemInsertCacheMut.RLock()
	cache, cached := blogFromManualItemInsertCache[key]
	blogFromManualItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blogFromManualItemAllColumns,
			blogFromManualItemColumnsWithDefault,
			blogFromManualItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blogFromManualItemType, blogFromManualItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blogFromManualItemType, blogFromManualItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `blog_from_manual_items` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `blog_from_manual_items` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `blog_from_manual_items` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, blogFromManualItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into blog_from_manual_items")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for blog_from_manual_items")
	}

CacheNoHooks:
	if !cached {
		blogFromManualItemInsertCacheMut.Lock()
		blogFromManualItemInsertCache[key] = cache
		blogFromManualItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single BlogFromManualItem record using the global executor.
// See Update for more documentation.
func (o *BlogFromManualItem) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BlogFromManualItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlogFromManualItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blogFromManualItemUpdateCacheMut.RLock()
	cache, cached := blogFromManualItemUpdateCache[key]
	blogFromManualItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blogFromManualItemAllColumns,
			blogFromManualItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update blog_from_manual_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `blog_from_manual_items` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, blogFromManualItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blogFromManualItemType, blogFromManualItemMapping, append(wl, blogFromManualItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update blog_from_manual_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for blog_from_manual_items")
	}

	if !cached {
		blogFromManualItemUpdateCacheMut.Lock()
		blogFromManualItemUpdateCache[key] = cache
		blogFromManualItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q blogFromManualItemQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q blogFromManualItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for blog_from_manual_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for blog_from_manual_items")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BlogFromManualItemSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlogFromManualItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogFromManualItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `blog_from_manual_items` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blogFromManualItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in blogFromManualItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all blogFromManualItem")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BlogFromManualItem) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLBlogFromManualItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlogFromManualItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no blog_from_manual_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blogFromManualItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBlogFromManualItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blogFromManualItemUpsertCacheMut.RLock()
	cache, cached := blogFromManualItemUpsertCache[key]
	blogFromManualItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blogFromManualItemAllColumns,
			blogFromManualItemColumnsWithDefault,
			blogFromManualItemColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blogFromManualItemAllColumns,
			blogFromManualItemPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert blog_from_manual_items, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`blog_from_manual_items`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `blog_from_manual_items` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(blogFromManualItemType, blogFromManualItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blogFromManualItemType, blogFromManualItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for blog_from_manual_items")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(blogFromManualItemType, blogFromManualItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for blog_from_manual_items")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for blog_from_manual_items")
	}

CacheNoHooks:
	if !cached {
		blogFromManualItemUpsertCacheMut.Lock()
		blogFromManualItemUpsertCache[key] = cache
		blogFromManualItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single BlogFromManualItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BlogFromManualItem) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BlogFromManualItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlogFromManualItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BlogFromManualItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blogFromManualItemPrimaryKeyMapping)
	sql := "DELETE FROM `blog_from_manual_items` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from blog_from_manual_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for blog_from_manual_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q blogFromManualItemQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q blogFromManualItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no blogFromManualItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from blog_from_manual_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for blog_from_manual_items")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BlogFromManualItemSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlogFromManualItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blogFromManualItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogFromManualItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `blog_from_manual_items` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blogFromManualItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from blogFromManualItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for blog_from_manual_items")
	}

	if len(blogFromManualItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BlogFromManualItem) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BlogFromManualItem provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlogFromManualItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBlogFromManualItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlogFromManualItemSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BlogFromManualItemSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlogFromManualItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlogFromManualItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blogFromManualItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `blog_from_manual_items`.* FROM `blog_from_manual_items` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blogFromManualItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BlogFromManualItemSlice")
	}

	*o = slice

	return nil
}

// BlogFromManualItemExistsG checks if the BlogFromManualItem row exists.
func BlogFromManualItemExistsG(ctx context.Context, iD string) (bool, error) {
	return BlogFromManualItemExists(ctx, boil.GetContextDB(), iD)
}

// BlogFromManualItemExists checks if the BlogFromManualItem row exists.
func BlogFromManualItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `blog_from_manual_items` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if blog_from_manual_items exists")
	}

	return exists, nil
}
