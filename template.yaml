AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  portfolio-api
  
  Sample SAM Template for portfolio-api

Parameters:
  DSN:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/dsn
  SentryDSN:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/sentry/dsn
  AppEnv:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/app-env

Globals:
  Function:
    Timeout: 15
    MemorySize: 4096
    Environment:
      Variables:
        DSN: !Ref DSN
        SENTRY_DSN: !Ref SentryDSN
        APP_ENV: !Ref AppEnv

Resources:
  DefaultAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: portfolio-api.igsr5.com
        CertificateArn: arn:aws:acm:ap-northeast-1:799705073177:certificate/93205524-ee35-4db3-a2ec-178c97088452
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: Z10382141794HJUVL4L9O

  # GET:/rss_feeds ===============================================
  GetRSSFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/get_rss_feeds
      Handler: get_rss_feeds
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds
            Method: GET
            ApiId: !Ref DefaultAPI
      Role: !GetAtt LambdaExecutionRole.Arn
  # GET:/rss_feeds ==============================================
 
  # GET:/rss_feed/{id} ==========================================
  GetRSSFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/get_rss_feed
      Handler: get_rss_feed
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feed/{id}
            Method: GET
            ApiId: !Ref DefaultAPI
      Role: !GetAtt LambdaExecutionRole.Arn
  # GET:/rss_feed/{id} ===========================================

  # POST:/rss_feeds ==============================================
  PostRSSFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/post_rss_feeds
      Handler: post_rss_feeds
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds
            Method: POST
            ApiId: !Ref DefaultAPI
      Role: !GetAtt LambdaExecutionRole.Arn
  # POST:/rss_feeds ==============================================
 
  # DELETE:/rss_feed/{id} ========================================
  GetRSSFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/delete_rss_feed
      Handler: delete_rss_feed
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feed/{id}
            Method: DELETE
            ApiId: !Ref DefaultAPI
      Role: !GetAtt LambdaExecutionRole.Arn
  # DELETE:/rss_feed/{id} =========================================

  UpdateBlogDataFromRSSJob:
      Type: AWS::Serverless::Function
      Properties:
          CodeUri: job
          Handler: update-blog-data-from-rss
          Runtime: go1.x
          Events:
              UpdateBlogDataFromRSS:
                  Type: Schedule
                  Properties:
                      Schedule: cron(* * * * ? *) 
      Environment:
        Variables:
          DSN: !Ref DSN
      Role: !GetAtt LambdaExecutionRole.Arn
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub lambda-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "lambda-secretmanager-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                    - "ssm:*"
                Resource: "*"
# Outputs:
  # API:
    # Description: "API Gateway endpoint URL for Prod environment for First Function"
    # Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      # HelloWorldFunction:
      #   Value: !GetAtt PostRSSFeeds.Arn
      # HelloWorldFunctionIamRole:
      #   Value: !GetAtt LambdaExecutionRole.Arn
      # UpdateBlogDataFromRSSJob:
      #   Value: !GetAtt UpdateBlogDataFromRSSJob.Arn
