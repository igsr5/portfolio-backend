AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'portfolio-api

  Sample SAM Template for portfolio-api

  '
Parameters:
  DSN:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/dsn
  SentryDSN:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/sentry/dsn
  AppEnv:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/app-env
  ApiKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/app-key
  CloudinaryCloudName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/cloudinary-cloud-name
  CloudinaryApiKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/cloudinary-api-key
  CloudinarySecret:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/cloudinary-secret
Globals:
  Function:
    Timeout: 15
    MemorySize: 4096
    Environment:
      Variables:
        DSN:
          Ref: DSN
        SENTRY_DSN:
          Ref: SentryDSN
        APP_ENV:
          Ref: AppEnv
        API_KEY:
          Ref: ApiKey
        CLOUDINARY_CLOUD_NAME:
          Ref: CloudinaryCloudName
        CLOUDINARY_API_KEY:
          Ref: CloudinaryApiKey
        CLOUDINARY_SECRET:
          Ref: CloudinarySecret
Resources:
  DefaultAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: portfolio-api.igsr5.com
        CertificateArn: arn:aws:acm:ap-northeast-1:799705073177:certificate/93205524-ee35-4db3-a2ec-178c97088452
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: Z10382141794HJUVL4L9O
    Metadata:
      SamResourceId: DefaultAPI
  GetRSSFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/33e5f9dd777aa31c9aa7eb7db68cd03d
      Handler: get_rss_feeds
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds
            Method: GET
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: GetRSSFeeds
  GetRSSFeed:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/3aabda50590035886e76caeae6c9474f
      Handler: get_rss_feed
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds/{id}
            Method: GET
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: GetRSSFeed
  PostRSSFeed:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/3178ef516f2be9f1555a8fcf3ea5502b
      Handler: post_rss_feeds
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds
            Method: POST
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: PostRSSFeed
  DeleteRSSFeed:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/8c4271eed59798e327ba74207f621163
      Handler: delete_rss_feed
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds/{id}
            Method: DELETE
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: DeleteRSSFeed
  GetBlogs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/d55d01fef2332187adc376c442b29cf3
      Handler: get_blogs
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /blogs
            Method: GET
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: GetBlogs
  GetBlog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/8bcad2b9438c1854e9b377bc4752550d
      Handler: get_blog
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /blogs/{id}
            Method: GET
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: GetBlog
  CreateBlog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/339c352eec5ae3aeeeeebf771aae6c71
      Handler: post_blogs
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /blogs
            Method: POST
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: CreateBlog
  UpdateBlogDataFromRSSJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/4bc4bd1614a8018dfecf9a681318de0e
      Handler: update-blog-data-from-rss
      Runtime: go1.x
      Events:
        UpdateBlogDataFromRSS:
          Type: Schedule
          Properties:
            Schedule: rate(3 minutes)
    Role:
      Fn::GetAtt:
      - LambdaExecutionRole
      - Arn
    Metadata:
      SamResourceId: UpdateBlogDataFromRSSJob
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: lambda-secretmanager-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:*
            Resource: '*'
    Metadata:
      SamResourceId: LambdaExecutionRole
