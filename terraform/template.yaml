AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'portfolio-api

  Sample SAM Template for portfolio-api

  '
Parameters:
  DSN:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/dsn
  SentryDSN:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/sentry/dsn
  AppEnv:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /portfolio/app-env
Globals:
  Function:
    Timeout: 15
    MemorySize: 4096
    Environment:
      Variables:
        DSN:
          Ref: DSN
        SENTRY_DSN:
          Ref: SentryDSN
        APP_ENV:
          Ref: AppEnv
Resources:
  DefaultAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: portfolio-api.igsr5.com
        CertificateArn: arn:aws:acm:ap-northeast-1:799705073177:certificate/93205524-ee35-4db3-a2ec-178c97088452
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: Z10382141794HJUVL4L9O
    Metadata:
      SamResourceId: DefaultAPI
  GetRSSFeeds:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/aa05239654599f655fc0f3a1bb43eea4
      Handler: get_rss_feeds
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds
            Method: GET
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: GetRSSFeeds
  GetRSSFeed:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/c63f62208f5ea5e4c9069dac275be855
      Handler: get_rss_feed
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds/{id}
            Method: GET
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: GetRSSFeed
  PostRSSFeed:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/1176c07cde68cddc54fa115705633ee9
      Handler: post_rss_feeds
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds
            Method: POST
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: PostRSSFeed
  DeleteRSSFeed:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/7bd50d1be43f75bd19879ce93f9c68e4
      Handler: delete_rss_feed
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /rss_feeds/{id}
            Method: DELETE
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: DeleteRSSFeed
  GetBlogs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/6276c732ff1dbb140f660b9b1bc54ac9
      Handler: get_blogs
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /blogs
            Method: GET
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: GetBlogs
  GetBlog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/98a88df9ee2274724f7480fd9425130a
      Handler: get_blog
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /blogs/{id}
            Method: GET
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: GetBlog
  CreateBlog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/d5fd704d11b46a5d8824660b228c8723
      Handler: post_blogs
      Runtime: go1.x
      Architectures:
      - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /blogs
            Method: POST
            ApiId:
              Ref: DefaultAPI
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Metadata:
      SamResourceId: CreateBlog
  UpdateBlogDataFromRSSJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://igsr5-portfolio-api-lambda-code/4294a646f6b87df19597e5a047fb5b0a
      Handler: update-blog-data-from-rss
      Runtime: go1.x
      Events:
        UpdateBlogDataFromRSS:
          Type: Schedule
          Properties:
            Schedule: rate(3 minutes)
    Environment:
      Variables:
        DSN:
          Ref: DSN
    Role:
      Fn::GetAtt:
      - LambdaExecutionRole
      - Arn
    Metadata:
      SamResourceId: UpdateBlogDataFromRSSJob
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: lambda-secretmanager-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - ssm:*
            Resource: '*'
    Metadata:
      SamResourceId: LambdaExecutionRole
